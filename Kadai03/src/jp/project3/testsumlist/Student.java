/***************************************************************************************************
 * 　TestSumListプログラム：サブクラス
 *
 * 　プログラム名：	Student
 * 　概要：			生徒の成績を表すクラス
 * 　作成日付：		2020/9/30
 * 　版数：			1.1版
 * 　作成者(班:PL)：	坂井 晶(3:秦　和也)
 *　 修正履歴： 		1.1版 保守性向上
 * 　備考：			教科数が増えても容易に変更できるように修正
 * 　課題No：			3
 **************************************************************************************************/

package jp.project3.testsumlist;

public class Student {
	private String 	name;		// 名前
	private int 	japanese;	// 国語の点数
	private int 	math;		// 数学の点数
	private int 	english;	// 英語の点数
	private int		sum;		// 合計点数
	private boolean	isRetest;	// 再試験か
	
	public Student(String name, int japanese, int math, int english) {
		this.name = name;	// 名前を代入
		this.japanese = japanese;	// 国語の点数を格納
		this.math = math;		// 数学の点数を格納
		this.english = english;	// 英語の点数を格納
		this.sum = calcSum(japanese, math, english); // ３教科の合計点を計算して格納
		this.isRetest = judjeIsRetest(japanese, math, english); 	// 再試験か判定して格納
	}
	
	/***************************************************************************************************
	 * 　メソッド（クラス）名：getName(Student)
	 *
	 * 　メソッド名：		getName
	 * 　概要：			生徒の氏名を返却するメソッド
	 * 　引数：			なし
	 * 　返却値			String型の生徒の指名
	 * 　備考：			なし
	 **************************************************************************************************/
	public String getName() {
		return name;
	}
	
	/***************************************************************************************************
	 * 　メソッド（クラス）名：getJapanese(Student)
	 *
	 * 　メソッド名：		getJapanese
	 * 　概要：			生徒の国語の点数を返却するメソッド
	 * 　引数：			なし
	 * 　返却値			int型の生徒の国語の点数
	 * 　備考：			なし
	 **************************************************************************************************/
	public int getJapanese() {
		return japanese;
	}
	
	/***************************************************************************************************
	 * 　メソッド（クラス）名：getMath(Student)
	 *
	 * 　メソッド名：		getMath
	 * 　概要：			生徒の数学の点数を返却するメソッド
	 * 　引数：			なし
	 * 　返却値			int型の生徒の数学の点数
	 * 　備考：			なし
	 **************************************************************************************************/
	public int getMath() {
		return math;
	}
	
	/***************************************************************************************************
	 * 　メソッド（クラス）名：getEnglish(Student)
	 *
	 * 　メソッド名：		getEnglish
	 * 　概要：			生徒の英語の点数を返却するメソッド
	 * 　引数：			なし
	 * 　返却値			int型の生徒の英語の点数
	 * 　備考：			なし
	 **************************************************************************************************/
	public int getEnglish() {
		return english;
	}
	
	/***************************************************************************************************
	 * 　メソッド（クラス）名：getSum(Student)
	 *
	 * 　メソッド名：		getSum
	 * 　概要：			生徒の合計点を返却するメソッド
	 * 　引数：			なし
	 * 　返却値			int型の生徒の合計点
	 * 　備考：			なし
	 **************************************************************************************************/
	public int getSum() {
		return sum;
	}
	
	/***************************************************************************************************
	 * 　メソッド（クラス）名：isRetest(Student)
	 *
	 * 　メソッド名：		isRetest
	 * 　概要：			再試験であるかを返すメソッド
	 * 　引数：			なし
	 * 　返却値			boolean型の再試験か
	 * 　備考：			なし
	 **************************************************************************************************/
	public boolean isRetest() {
		return isRetest;
	}
	
	/***************************************************************************************************
	 * 　メソッド（クラス）名：calcSum(Student)
	 *
	 * 　メソッド名：		calcSum
	 * 　概要：			合計点を計算するメソッド
	 * 　引数：			なし
	 * 　返却値			int型の各教科から計算した合計点
	 * 　備考：			なし
	 **************************************************************************************************/
	int calcSum(int... scores) {
		// 版数1.3
		int sum = TestSumList.ZERO;
		for (int score : scores) {
			sum += score == TestSumList.NEGATIVE ? TestSumList.ZERO : score;
		}
		return sum; 
	}
	
	/***************************************************************************************************
	 * 　メソッド（クラス）名：judjeIsRetest(Student)
	 *
	 * 　メソッド名：		judjeIsRetest
	 * 　概要：			再試験か判定するメソッド
	 * 　引数：			なし
	 * 　返却値			boolean型の再試験かどうかを返却
	 * 　備考：			なし
	 **************************************************************************************************/
	boolean judjeIsRetest(int... scores) {
		// 版数1.3
		int count = TestSumList.ZERO;
		for (int score : scores) {
			count += score <= TestSumList.RED_SCORE ? TestSumList.ONE : TestSumList.ZERO;
		}
		return count > TestSumList.ZERO; 
	}
}
